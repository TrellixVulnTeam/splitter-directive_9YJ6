import { DOCUMENT } from '@angular/common';
import { EventEmitter, Inject, Input, Output } from '@angular/core';
import { Directive } from '@angular/core';
import * as i0 from "@angular/core";
/** @dynamic */
export class SplitterDirective {
    constructor(el, document) {
        this.el = el;
        this.document = document;
        this.vertical = false;
        this.splits = [];
        this.size = null;
        this.splitclass = null;
        this.addstyle = null;
        this.addhoverstyle = null;
        this.onDropSplitter = new EventEmitter();
    }
    ngOnInit() {
        this.parent = this.el.nativeElement;
        let style = "";
        style += this.vertical ?
            `flex-wrap:nowrap;flex-direction:column;display-flex:!important;overflow-y:auto;${this.size ? `width: ${this.size}; max-width:${this.size};` : ``}`
            : `flex-wrap:nowrap;display-flex:!important;overflow-x:auto;${this.size ? `height: ${this.size}; max-height : ${this.size};` : ``}`;
        style += "display:flex;flex-wrap:nowrap;";
        this.parent.style += style;
        console.log(this.getStyle("." + this.splitclass));
        this.init();
    }
    init() {
        if (document.readyState == "complete") {
            this.parent.addEventListener("dragover", (event) => { event.preventDefault(); });
            let childrens = this.parent.children.length;
            for (let i = 1; i < childrens; i++) {
                let islast = i == childrens - 1;
                let child = this.parent.children[i + this.splits.length];
                let split = this.getSplitter();
                this.parent.insertBefore(split, child);
                this.splits.push(split);
            }
            if (!this.observer) {
                this.addMutations();
            }
        }
        else {
            this.init();
        }
    }
    getSplitter() {
        let split = this.document.createElement("split");
        split.classList.add("splitter");
        if (this.splitclass) {
            split.classList.add(this.splitclass);
        }
        let style = "";
        if (this.vertical) {
            split.classList.add("splittervertical");
            style += `border-bottom:solid 4px #DCDCDC;height:0px;max-height:0px;width:100%;display:inline-block;cursor:row-resize;`;
        }
        else {
            style += `border-left:solid 4px #DCDCDC;width:0px;max-width:0px;height:100%;display:inline-block;cursor:col-resize;`;
        }
        let hoverstyle = "";
        if (this.addhoverstyle) {
            hoverstyle = style + this.addhoverstyle;
        }
        if (this.addstyle) {
            style += this.addstyle;
        }
        split.setAttribute("style", style);
        split.setAttribute("draggable", "true");
        split.draggable = true;
        split.addEventListener("mouseover", () => {
            split.classList.add("splitterhover");
            if (!this.vertical)
                split.style.borderLeftColor = "#6196B2";
            else
                split.style.borderBottomColor = "#6196B2";
            if (hoverstyle) {
                split.setAttribute("style", hoverstyle);
            }
        });
        split.addEventListener("mouseout", () => {
            split.classList.remove("splitterhover");
            if (!this.vertical)
                split.style.borderLeftColor = "#DCDCDC";
            else
                split.style.borderBottomColor = "#DCDCDC";
            if (hoverstyle) {
                split.setAttribute("style", style);
            }
        });
        let eventListener = (event) => {
            let dropx = event.pageX;
            let dropy = event.pageY;
            let splitwidth = split.offsetWidth;
            let prev = split.previousElementSibling;
            let next = split.nextElementSibling;
            prev.removeEventListener("drop", eventListener);
            next.removeEventListener("drop", eventListener);
            this.onDropSplitter.emit({ event, split, prev, next });
            if (!this.vertical) {
                let prevwidth, nextwidth;
                if (dropx < split.offsetLeft) {
                    prevwidth = prev.clientWidth - (split.offsetLeft - dropx);
                    nextwidth = next.clientWidth + (split.offsetLeft - dropx);
                }
                else {
                    prevwidth = (prev.clientWidth) + (dropx - split.offsetLeft);
                    nextwidth = (next.clientWidth) - (dropx - split.offsetLeft);
                }
                prev.style.flex = next.hasAttribute("splitgrow") ? `1 0 ${prevwidth}px` : `0 1 ${prevwidth}px`;
                next.style.flex = next.hasAttribute("splitgrow") ? `1 0 ${nextwidth}px` : `0 1 ${nextwidth}px`;
                prev.style.overflowX = "auto";
                next.style.overflowX = "auto";
            }
            else {
                let prevheight, nextheight;
                if (dropy < split.offsetTop) {
                    prevheight = prev.clientHeight - (split.offsetTop - dropy);
                    nextheight = next.clientHeight + (split.offsetTop - dropy);
                }
                else {
                    prevheight = prev.clientHeight + (dropy - split.offsetTop);
                    nextheight = next.clientHeight - (dropy - split.offsetTop);
                }
                prev.style.flex = next.hasAttribute("splitgrow") ? `1 0 ${prevheight}px` : `0 1 ${prevheight}px`;
                next.style.flex = next.hasAttribute("splitgrow") ? `1 0 ${nextheight}px` : `0 1 ${nextheight}px`;
                prev.style.overflowY = "auto";
                next.style.overflowY = "auto";
            }
        };
        split.addEventListener("dragstart", (event) => {
            let prev = split.previousElementSibling;
            let next = split.nextElementSibling;
            prev.addEventListener("drop", eventListener);
            next.addEventListener("drop", eventListener);
        });
        return split;
    }
    getPercentage(pixel) {
        let width = this.parent.offsetWidth;
        return pixel / width * 100;
    }
    getPercentageHeight(pixel) {
        let height = this.parent.offsetHeight;
        return pixel / height * 100;
    }
    addMutations() {
        let observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                this.reset();
                this.init();
            });
        });
        let config = { childList: true };
        observer.observe(this.parent, config);
        this.observer = observer;
    }
    reset() {
        this.observer.disconnect();
        this.splits.forEach((item) => {
            this.parent.removeChild(item);
        });
        this.splits = [];
        this.observer = null;
    }
    getStyle(className) {
        var cssText = "";
        var classes = this.document.styleSheets[0].rules || this.document.styleSheets[0].cssRules;
        for (var x = 0; x < classes.length; x++) {
            if (classes[x].selectorText == className) {
                cssText += classes[x].cssText || classes[x].style.cssText;
            }
        }
        return cssText;
    }
}
SplitterDirective.ɵfac = function SplitterDirective_Factory(t) { return new (t || SplitterDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT)); };
SplitterDirective.ɵdir = i0.ɵɵdefineDirective({ type: SplitterDirective, selectors: [["", "splitterDirective", ""]], inputs: { vertical: "vertical", size: "size", splitclass: "splitclass", addstyle: "addstyle", addhoverstyle: "addhoverstyle" }, outputs: { onDropSplitter: "onDropSplitter" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SplitterDirective, [{
        type: Directive,
        args: [{
                selector: '[splitterDirective]'
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { vertical: [{
            type: Input
        }], size: [{
            type: Input
        }], splitclass: [{
            type: Input
        }], addstyle: [{
            type: Input
        }], addhoverstyle: [{
            type: Input
        }], onDropSplitter: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvc3BsaXR0ZXItZGlyZWN0aXZlL3NyYy9saWIvc3BsaXR0ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWxFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBQ3hDLGVBQWU7QUFJZixNQUFNLE9BQU8saUJBQWlCO0lBYTFCLFlBQW9CLEVBQWMsRUFBMkIsUUFBbUI7UUFBNUQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUEyQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBWnZFLGFBQVEsR0FBYSxLQUFLLENBQUM7UUFHNUIsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNILFNBQUksR0FBRyxJQUFJLENBQUM7UUFDWixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFDaEIsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFHNUIsbUJBQWMsR0FBcUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUloRSxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLEdBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDckMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QixrRkFBa0YsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxlQUFlLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ25KLENBQUMs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O2tCQUFwQixLQUFLO1lBQ1csVUFBVTtrQkFBMUIsS0FBSztZQUNXLFFBQVE7a0JBQXhCLEtBQUs7WUFDVyxhQUFhO2tCQUE3QixLQUFLO1lBR0ksY0FBYztrQkFBdkIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtFdmVudEVtaXR0ZXIsIEluamVjdCwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnR7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlyZWN0aXZlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKiBAZHluYW1pYyAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3IgOiAnW3NwbGl0dGVyRGlyZWN0aXZlXSdcbn0pXG5leHBvcnQgY2xhc3MgU3BsaXR0ZXJEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpIHZlcnRpY2FsIDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgcGFyZW50UG9zaXRpb247XG4gICAgcHJpdmF0ZSBwYXJlbnQ7XG4gICAgcHJpdmF0ZSBzcGxpdHMgPSBbXTtcbiAgICBASW5wdXQoKSBwcml2YXRlIHNpemUgPSBudWxsO1xuICAgIEBJbnB1dCgpIHByaXZhdGUgc3BsaXRjbGFzcyA9IG51bGw7XG4gICAgQElucHV0KCkgcHJpdmF0ZSBhZGRzdHlsZSA9IG51bGw7XG4gICAgQElucHV0KCkgcHJpdmF0ZSBhZGRob3ZlcnN0eWxlID0gbnVsbDtcblxuICAgIHByaXZhdGUgb2JzZXJ2ZXI7XG4gICAgQE91dHB1dCgpIG9uRHJvcFNwbGl0dGVyOkV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCA6IERvY3VtZW50KXtcbiAgICAgICBcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpe1xuICAgICAgdGhpcy5wYXJlbnQgPSAgdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgICAgbGV0IHN0eWxlID0gXCJcIjtcbiAgICAgIHN0eWxlICs9IHRoaXMudmVydGljYWwgPyBcbiAgICAgIGBmbGV4LXdyYXA6bm93cmFwO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtkaXNwbGF5LWZsZXg6IWltcG9ydGFudDtvdmVyZmxvdy15OmF1dG87JHt0aGlzLnNpemUgPyBgd2lkdGg6ICR7dGhpcy5zaXplfTsgbWF4LXdpZHRoOiR7dGhpcy5zaXplfTtgIDogYGB9YCBcbiAgICAgIDogYGZsZXgtd3JhcDpub3dyYXA7ZGlzcGxheS1mbGV4OiFpbXBvcnRhbnQ7b3ZlcmZsb3cteDphdXRvOyR7dGhpcy5zaXplID8gYGhlaWdodDogJHt0aGlzLnNpemV9OyBtYXgtaGVpZ2h0IDogJHt0aGlzLnNpemV9O2AgOiBgYH1gO1xuICAgICAgICBzdHlsZSArPSBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6bm93cmFwO1wiO1xuICAgICAgICB0aGlzLnBhcmVudC5zdHlsZSArPSBzdHlsZTtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0U3R5bGUoXCIuXCIrdGhpcy5zcGxpdGNsYXNzKSk7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpbml0KCl7XG4gICAgICAgIGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgPT0gXCJjb21wbGV0ZVwiKXtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLChldmVudCkgPT4geyBldmVudC5wcmV2ZW50RGVmYXVsdCgpO30pXG4gICAgICAgICAgICBsZXQgY2hpbGRyZW5zID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKGxldCBpPTEgOyBpIDwgY2hpbGRyZW5zIDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgaXNsYXN0ID0gaSA9PSBjaGlsZHJlbnMgLTEgO1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuW2krdGhpcy5zcGxpdHMubGVuZ3RoXTtcbiAgICAgICAgICAgICAgICBsZXQgc3BsaXQgPSB0aGlzLmdldFNwbGl0dGVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHNwbGl0LGNoaWxkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0cy5wdXNoKHNwbGl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCF0aGlzLm9ic2VydmVyKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZE11dGF0aW9ucygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTcGxpdHRlcigpe1xuICAgICAgICBsZXQgc3BsaXQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGxpdFwiKTtcbiAgICAgICAgc3BsaXQuY2xhc3NMaXN0LmFkZChcInNwbGl0dGVyXCIpO1xuICAgICAgICBpZih0aGlzLnNwbGl0Y2xhc3Mpe1xuICAgICAgICAgIHNwbGl0LmNsYXNzTGlzdC5hZGQodGhpcy5zcGxpdGNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3R5bGUgPSBcIlwiXG4gICAgICAgIGlmKHRoaXMudmVydGljYWwpe1xuICAgICAgICAgICAgc3BsaXQuY2xhc3NMaXN0LmFkZChcInNwbGl0dGVydmVydGljYWxcIik7XG4gICAgICAgICAgICBzdHlsZSArPSBgYm9yZGVyLWJvdHRvbTpzb2xpZCA0cHggI0RDRENEQztoZWlnaHQ6MHB4O21heC1oZWlnaHQ6MHB4O3dpZHRoOjEwMCU7ZGlzcGxheTppbmxpbmUtYmxvY2s7Y3Vyc29yOnJvdy1yZXNpemU7YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgc3R5bGUgKz0gYGJvcmRlci1sZWZ0OnNvbGlkIDRweCAjRENEQ0RDO3dpZHRoOjBweDttYXgtd2lkdGg6MHB4O2hlaWdodDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpjb2wtcmVzaXplO2A7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhvdmVyc3R5bGUgPSBcIlwiO1xuICAgICAgICBpZih0aGlzLmFkZGhvdmVyc3R5bGUpe1xuICAgICAgICAgIGhvdmVyc3R5bGUgPSBzdHlsZSArIHRoaXMuYWRkaG92ZXJzdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuYWRkc3R5bGUpe1xuICAgICAgICAgIHN0eWxlICs9IHRoaXMuYWRkc3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNwbGl0LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsc3R5bGUpO1xuICAgICAgICBzcGxpdC5zZXRBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIixcInRydWVcIik7XG4gICAgICAgIHNwbGl0LmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIHNwbGl0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwoKSA9PiB7XG4gICAgICAgICAgc3BsaXQuY2xhc3NMaXN0LmFkZChcInNwbGl0dGVyaG92ZXJcIik7XG4gICAgICAgICAgaWYoIXRoaXMudmVydGljYWwpXG4gICAgICAgICAgc3BsaXQuc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gXCIjNjE5NkIyXCI7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgIHNwbGl0LnN0eWxlLmJvcmRlckJvdHRvbUNvbG9yID0gXCIjNjE5NkIyXCI7XG5cbiAgICAgICAgICBpZihob3ZlcnN0eWxlKXtcbiAgICAgICAgICAgIHNwbGl0LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsaG92ZXJzdHlsZSk7XG5cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzcGxpdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwoKSA9PiB7XG4gICAgICAgICAgc3BsaXQuY2xhc3NMaXN0LnJlbW92ZShcInNwbGl0dGVyaG92ZXJcIik7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYoIXRoaXMudmVydGljYWwpXG4gICAgICAgICAgc3BsaXQuc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gXCIjRENEQ0RDXCI7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgIHNwbGl0LnN0eWxlLmJvcmRlckJvdHRvbUNvbG9yID0gXCIjRENEQ0RDXCI7XG5cbiAgICAgICAgICBpZihob3ZlcnN0eWxlKXtcbiAgICAgICAgICAgIHNwbGl0LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsc3R5bGUpO1xuXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGxldCBldmVudExpc3RlbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZHJvcHggPSBldmVudC5wYWdlWDtcbiAgICAgICAgICAgIGxldCBkcm9weSA9IGV2ZW50LnBhZ2VZO1xuICAgICAgICAgICAgbGV0IHNwbGl0d2lkdGggPSBzcGxpdC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIGxldCBwcmV2IDogYW55ID0gc3BsaXQucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGxldCBuZXh0IDogYW55ID0gc3BsaXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgcHJldi5yZW1vdmVFdmVudExpc3RlbmVyKFwiZHJvcFwiLGV2ZW50TGlzdGVuZXIpO1xuICAgICAgICAgICAgbmV4dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZHJvcFwiLGV2ZW50TGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5vbkRyb3BTcGxpdHRlci5lbWl0KHtldmVudCAsIHNwbGl0ICwgcHJldiwgbmV4dH0pO1xuICAgICAgICAgICAgaWYoIXRoaXMudmVydGljYWwpe1xuICAgICAgICAgICAgICAgIGxldCBwcmV2d2lkdGgsbmV4dHdpZHRoO1xuICAgICAgICAgICAgICAgIGlmKGRyb3B4IDwgc3BsaXQub2Zmc2V0TGVmdCl7XG4gICAgICAgICAgICAgICAgICAgIHByZXZ3aWR0aCA9IHByZXYuY2xpZW50V2lkdGggLSAoc3BsaXQub2Zmc2V0TGVmdCAtIGRyb3B4KTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dHdpZHRoID0gbmV4dC5jbGllbnRXaWR0aCArIChzcGxpdC5vZmZzZXRMZWZ0IC0gZHJvcHgpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHByZXZ3aWR0aCA9IChwcmV2LmNsaWVudFdpZHRoKSAgKyAoZHJvcHggLSBzcGxpdC5vZmZzZXRMZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dHdpZHRoID0gKG5leHQuY2xpZW50V2lkdGgpIC0gKGRyb3B4IC0gc3BsaXQub2Zmc2V0TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXYuc3R5bGUuZmxleCA9IG5leHQuaGFzQXR0cmlidXRlKFwic3BsaXRncm93XCIpID8gYDEgMCAke3ByZXZ3aWR0aH1weGAgOiBgMCAxICR7cHJldndpZHRofXB4YFxuICAgICAgICAgICAgICAgIG5leHQuc3R5bGUuZmxleCA9IG5leHQuaGFzQXR0cmlidXRlKFwic3BsaXRncm93XCIpID8gYDEgMCAke25leHR3aWR0aH1weGAgOiBgMCAxICR7bmV4dHdpZHRofXB4YFxuICAgICAgICAgICAgICAgIHByZXYuc3R5bGUub3ZlcmZsb3dYID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgbmV4dC5zdHlsZS5vdmVyZmxvd1g9XCJhdXRvXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBwcmV2aGVpZ2h0LG5leHRoZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYoZHJvcHkgPCBzcGxpdC5vZmZzZXRUb3Ape1xuICAgICAgICAgICAgICAgICAgICBwcmV2aGVpZ2h0ID0gcHJldi5jbGllbnRIZWlnaHQgLSAoc3BsaXQub2Zmc2V0VG9wIC0gZHJvcHkpO1xuICAgICAgICAgICAgICAgICAgICBuZXh0aGVpZ2h0ID0gbmV4dC5jbGllbnRIZWlnaHQgKyAoc3BsaXQub2Zmc2V0VG9wIC0gZHJvcHkpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHByZXZoZWlnaHQgPSBwcmV2LmNsaWVudEhlaWdodCArIChkcm9weSAtIHNwbGl0Lm9mZnNldFRvcCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRoZWlnaHQgPSBuZXh0LmNsaWVudEhlaWdodCAtIChkcm9weSAtIHNwbGl0Lm9mZnNldFRvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXYuc3R5bGUuZmxleCA9IG5leHQuaGFzQXR0cmlidXRlKFwic3BsaXRncm93XCIpID8gYDEgMCAke3ByZXZoZWlnaHR9cHhgIDogYDAgMSAke3ByZXZoZWlnaHR9cHhgXG4gICAgICAgICAgICAgICAgbmV4dC5zdHlsZS5mbGV4ID0gbmV4dC5oYXNBdHRyaWJ1dGUoXCJzcGxpdGdyb3dcIikgPyBgMSAwICR7bmV4dGhlaWdodH1weGAgOiBgMCAxICR7bmV4dGhlaWdodH1weGBcbiAgICAgICAgICAgICAgICBwcmV2LnN0eWxlLm92ZXJmbG93WSA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgIG5leHQuc3R5bGUub3ZlcmZsb3dZPVwiYXV0b1wiO1xuICAgICAgICAgICAgfVxuICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBzcGxpdC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IHByZXYgOiBhbnkgPSBzcGxpdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgbGV0IG5leHQgOiBhbnkgPSBzcGxpdC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBwcmV2LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsZXZlbnRMaXN0ZW5lcik7XG4gICAgICAgICAgICBuZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsZXZlbnRMaXN0ZW5lcik7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBzcGxpdDtcbiAgICB9XG5cbiAgICBnZXRQZXJjZW50YWdlKHBpeGVsKXtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5wYXJlbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIHJldHVybiBwaXhlbC93aWR0aCoxMDA7XG4gICAgfVxuICAgIGdldFBlcmNlbnRhZ2VIZWlnaHQocGl4ZWwpe1xuICAgICAgICBsZXQgaGVpZ2h0ID0gdGhpcy5wYXJlbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICByZXR1cm4gcGl4ZWwvaGVpZ2h0KjEwMDtcbiAgICB9XG5cbiAgICBhZGRNdXRhdGlvbnMoKXtcbiAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIGxldCBjb25maWcgPSB7Y2hpbGRMaXN0IDogdHJ1ZX07XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcy5wYXJlbnQsY29uZmlnKTtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgIH1cblxuICAgIHJlc2V0KCl7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLnNwbGl0cy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3BsaXRzID0gW107XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIFxuXG4gICAgIGdldFN0eWxlKGNsYXNzTmFtZSkge1xuICAgICAgdmFyIGNzc1RleHQgPSBcIlwiO1xuICAgICAgdmFyIGNsYXNzZXMgOiBhbnk9IHRoaXMuZG9jdW1lbnQuc3R5bGVTaGVldHNbMF0ucnVsZXMgfHwgdGhpcy5kb2N1bWVudC5zdHlsZVNoZWV0c1swXS5jc3NSdWxlcztcbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgY2xhc3Nlcy5sZW5ndGg7IHgrKykgeyAgICAgICAgXG4gICAgICAgICAgaWYgKGNsYXNzZXNbeF0uc2VsZWN0b3JUZXh0ID09IGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICBjc3NUZXh0ICs9IGNsYXNzZXNbeF0uY3NzVGV4dCB8fCBjbGFzc2VzW3hdLnN0eWxlLmNzc1RleHQ7XG4gICAgICAgICAgfSAgICAgICAgIFxuICAgICAgfVxuICAgICAgcmV0dXJuIGNzc1RleHQ7XG4gIH1cblxufSJdfQ==