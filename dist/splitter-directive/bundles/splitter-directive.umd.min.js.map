{"version":3,"sources":["../../../projects/splitter-directive/src/lib/splitter.directive.ts","../../../projects/splitter-directive/src/lib/test-component/test-component.component.ts","../../../projects/splitter-directive/src/lib/splitter-directive.module.ts"],"names":["SplitterDirective","el","document","this","vertical","splits","size","splitclass","addstyle","addhoverstyle","onDropSplitter","EventEmitter","prototype","ngOnInit","parent","nativeElement","style","console","log","getStyle","init","addEventListener","event","preventDefault","childrens","children","length","i","child","split","getSplitter","insertBefore","push","observer","addMutations","_this","createElement","classList","add","hoverstyle","setAttribute","draggable","borderBottomColor","borderLeftColor","remove","eventListener","dropx","pageX","dropy","pageY","prev","offsetWidth","previousElementSibling","next","nextElementSibling","removeEventListener","emit","prevheight","nextheight","offsetTop","clientHeight","flex","hasAttribute","overflowY","prevwidth","nextwidth","offsetLeft","clientWidth","overflowX","getPercentage","pixel","getPercentageHeight","offsetHeight","MutationObserver","mutations","forEach","mutation","reset","observe","childList","disconnect","item","removeChild","className","cssText","classes","styleSheets","rules","cssRules","x","selectorText","Directive","args","selector","ElementRef","Document","decorators","type","Inject","DOCUMENT","Input","Output","TestComponentComponent","Component","template","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["\nimport { DOCUMENT } from '@angular/common';\nimport {EventEmitter, Inject, Input, Output} from '@angular/core';\nimport{ ElementRef } from '@angular/core';\nimport {Directive} from '@angular/core';\n/** @dynamic */\n@Directive({\n    selector : '[splitterDirective]'\n})\nexport class SplitterDirective {\n    @Input() vertical : boolean = false;\n    private parentPosition;\n    private parent;\n    private splits = [];\n    @Input() private size = null;\n    @Input() private splitclass = null;\n    @Input() private addstyle = null;\n    @Input() private addhoverstyle = null;\n\n    private observer;\n    @Output() onDropSplitter:EventEmitter<any> = new EventEmitter();\n    \n    constructor(private el: ElementRef,@Inject(DOCUMENT) private document : Document){\n       \n    }\n\n    ngOnInit(){\n      this.parent =  this.el.nativeElement;\n      let style = \"\";\n      style += this.vertical ? \n      `flex-wrap:nowrap;flex-direction:column;display-flex:!important;overflow-y:auto;${this.size ? `width: ${this.size}; max-width:${this.size};` : ``}` \n      : `flex-wrap:nowrap;display-flex:!important;overflow-x:auto;${this.size ? `height: ${this.size}; max-height : ${this.size};` : ``}`;\n        style += \"display:flex;flex-wrap:nowrap;\";\n        this.parent.style += style;\n      console.log(this.getStyle(\".\"+this.splitclass));\n      this.init();\n    }\n\n    init(){\n      \n            this.parent.addEventListener(\"dragover\",(event) => { event.preventDefault();})\n            let childrens = this.parent.children.length;\n            for(let i=1 ; i < childrens ; i++){\n                let islast = i == childrens -1 ;\n                let child = this.parent.children[i+this.splits.length];\n                let split = this.getSplitter();\n                this.parent.insertBefore(split,child);\n                this.splits.push(split);\n            }\n            if(!this.observer){\n                this.addMutations();\n            }\n        \n        \n    }\n\n    getSplitter(){\n        let split = this.document.createElement(\"split\");\n        split.classList.add(\"splitter\");\n        if(this.splitclass){\n          split.classList.add(this.splitclass);\n        }\n        let style = \"\"\n        if(this.vertical){\n            split.classList.add(\"splittervertical\");\n            style += `border-bottom:solid 4px #DCDCDC;height:0px;max-height:0px;width:100%;display:inline-block;cursor:row-resize;`;\n        }\n        else{\n            style += `border-left:solid 4px #DCDCDC;width:0px;max-width:0px;height:100%;display:inline-block;cursor:col-resize;`;\n        }\n        let hoverstyle = \"\";\n        if(this.addhoverstyle){\n          hoverstyle = style + this.addhoverstyle;\n        }\n\n        if(this.addstyle){\n          style += this.addstyle;\n        }\n        \n        split.setAttribute(\"style\",style);\n        split.setAttribute(\"draggable\",\"true\");\n        split.draggable = true;\n        split.addEventListener(\"mouseover\",() => {\n          split.classList.add(\"splitterhover\");\n          if(!this.vertical)\n          split.style.borderLeftColor = \"#6196B2\";\n          else\n          split.style.borderBottomColor = \"#6196B2\";\n\n          if(hoverstyle){\n            split.setAttribute(\"style\",hoverstyle);\n\n          }\n        });\n        split.addEventListener(\"mouseout\",() => {\n          split.classList.remove(\"splitterhover\");\n          \n          if(!this.vertical)\n          split.style.borderLeftColor = \"#DCDCDC\";\n          else\n          split.style.borderBottomColor = \"#DCDCDC\";\n\n          if(hoverstyle){\n            split.setAttribute(\"style\",style);\n\n          }\n        })\n\n        let eventListener = (event) => {\n          \n            let dropx = event.pageX;\n            let dropy = event.pageY;\n            let splitwidth = split.offsetWidth;\n            let prev : any = split.previousElementSibling;\n            let next : any = split.nextElementSibling;\n            prev.removeEventListener(\"drop\",eventListener);\n            next.removeEventListener(\"drop\",eventListener);\n            this.onDropSplitter.emit({event , split , prev, next});\n            if(!this.vertical){\n                let prevwidth,nextwidth;\n                if(dropx < split.offsetLeft){\n                    prevwidth = prev.clientWidth - (split.offsetLeft - dropx);\n                    nextwidth = next.clientWidth + (split.offsetLeft - dropx);\n\n                }\n                else{\n                    prevwidth = (prev.clientWidth)  + (dropx - split.offsetLeft);\n                    nextwidth = (next.clientWidth) - (dropx - split.offsetLeft);\n                }\n                prev.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${prevwidth}px` : `0 1 ${prevwidth}px`\n                next.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${nextwidth}px` : `0 1 ${nextwidth}px`\n                prev.style.overflowX = \"auto\";\n                next.style.overflowX=\"auto\";\n            }\n            else{\n                let prevheight,nextheight;\n                if(dropy < split.offsetTop){\n                    prevheight = prev.clientHeight - (split.offsetTop - dropy);\n                    nextheight = next.clientHeight + (split.offsetTop - dropy);\n\n                }\n                else{\n                    prevheight = prev.clientHeight + (dropy - split.offsetTop);\n                    nextheight = next.clientHeight - (dropy - split.offsetTop);\n                }\n                prev.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${prevheight}px` : `0 1 ${prevheight}px`\n                next.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${nextheight}px` : `0 1 ${nextheight}px`\n                prev.style.overflowY = \"auto\";\n                next.style.overflowY=\"auto\";\n            }\n      \n        }\n\n        split.addEventListener(\"dragstart\", (event) => {\n            let prev : any = split.previousElementSibling;\n            let next : any = split.nextElementSibling;\n            prev.addEventListener(\"drop\",eventListener);\n            next.addEventListener(\"drop\",eventListener);\n        })\n        return split;\n    }\n\n    getPercentage(pixel){\n        let width = this.parent.offsetWidth;\n        return pixel/width*100;\n    }\n    getPercentageHeight(pixel){\n        let height = this.parent.offsetHeight;\n        return pixel/height*100;\n    }\n\n    addMutations(){\n        let observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                this.reset();\n                this.init();\n            })\n        });\n    \n        let config = {childList : true};\n        observer.observe(this.parent,config);\n        this.observer = observer;\n    }\n\n    reset(){\n        this.observer.disconnect();\n        this.splits.forEach((item) => {\n            this.parent.removeChild(item);\n        });\n        this.splits = [];\n        this.observer = null;\n    }\n\n    \n\n     getStyle(className) {\n      var cssText = \"\";\n      var classes : any= this.document.styleSheets[0].rules || this.document.styleSheets[0].cssRules;\n      for (var x = 0; x < classes.length; x++) {        \n          if (classes[x].selectorText == className) {\n              cssText += classes[x].cssText || classes[x].style.cssText;\n          }         \n      }\n      return cssText;\n  }\n\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-test-component',\n  templateUrl: './test-component.component.html',\n  styleUrls: ['./test-component.component.css']\n})\nexport class TestComponentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SplitterDirective } from './splitter.directive';\nimport { TestComponentComponent } from './test-component/test-component.component';\n\n\n\n@NgModule({\n  declarations: [ SplitterDirective, TestComponentComponent],\n  imports: [\n  ],\n  exports: [SplitterDirective]\n})\nexport class SplitterDirectiveModule { }\n"]}