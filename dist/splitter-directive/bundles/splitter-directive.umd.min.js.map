{"version":3,"sources":["../../../projects/splitter-directive/src/lib/splitter.directive.ts","../../../projects/splitter-directive/src/lib/test-component/test-component.component.ts","../../../projects/splitter-directive/src/lib/test-component/test-component.component.html","../../../projects/splitter-directive/src/lib/splitter-directive.module.ts"],"names":["SplitterDirective","el","document","this","vertical","splits","size","splitclass","addstyle","addhoverstyle","onDropSplitter","EventEmitter","prototype","ngOnInit","parent","nativeElement","style","console","log","getStyle","init","readyState","addEventListener","event","preventDefault","childrens","children","length","i","child","split","getSplitter","insertBefore","push","observer","addMutations","_this","createElement","classList","add","hoverstyle","setAttribute","draggable","borderBottomColor","borderLeftColor","remove","eventListener","dropx","pageX","dropy","pageY","prev","offsetWidth","previousElementSibling","next","nextElementSibling","removeEventListener","emit","prevheight","nextheight","offsetTop","clientHeight","flex","hasAttribute","overflowY","prevwidth","nextwidth","offsetLeft","clientWidth","overflowX","getPercentage","pixel","getPercentageHeight","offsetHeight","MutationObserver","mutations","forEach","mutation","reset","observe","childList","disconnect","item","removeChild","className","cssText","classes","styleSheets","rules","cssRules","x","selectorText","i0","ɵɵdirectiveInject","ElementRef","DOCUMENT","selectors","inputs","outputs","Directive","selector","Document","decorators","Inject","Input","Output","TestComponentComponent","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵproperty","Component","templateUrl","styleUrls","SplitterDirectiveModule","declarations","exports","NgModule","imports"],"mappings":"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","sourcesContent":["\nimport { DOCUMENT } from '@angular/common';\nimport {EventEmitter, Inject, Input, Output} from '@angular/core';\nimport{ ElementRef } from '@angular/core';\nimport {Directive} from '@angular/core';\n/** @dynamic */\n@Directive({\n    selector : '[splitterDirective]'\n})\nexport class SplitterDirective {\n    @Input() vertical : boolean = false;\n    private parentPosition;\n    private parent;\n    private splits = [];\n    @Input() private size = null;\n    @Input() private splitclass = null;\n    @Input() private addstyle = null;\n    @Input() private addhoverstyle = null;\n\n    private observer;\n    @Output() onDropSplitter:EventEmitter<any> = new EventEmitter();\n    \n    constructor(private el: ElementRef,@Inject(DOCUMENT) private document : Document){\n       \n    }\n\n    ngOnInit(){\n      this.parent =  this.el.nativeElement;\n      let style = \"\";\n      style += this.vertical ? \n      `flex-wrap:nowrap;flex-direction:column;display-flex:!important;overflow-y:auto;${this.size ? `width: ${this.size}; max-width:${this.size};` : ``}` \n      : `flex-wrap:nowrap;display-flex:!important;overflow-x:auto;${this.size ? `height: ${this.size}; max-height : ${this.size};` : ``}`;\n        style += \"display:flex;flex-wrap:nowrap;\";\n        this.parent.style += style;\n      console.log(this.getStyle(\".\"+this.splitclass));\n      this.init();\n    }\n\n    init(){\n        if(document.readyState == \"complete\"){\n            this.parent.addEventListener(\"dragover\",(event) => { event.preventDefault();})\n            let childrens = this.parent.children.length;\n            for(let i=1 ; i < childrens ; i++){\n                let islast = i == childrens -1 ;\n                let child = this.parent.children[i+this.splits.length];\n                let split = this.getSplitter();\n                this.parent.insertBefore(split,child);\n                this.splits.push(split);\n            }\n            if(!this.observer){\n                this.addMutations();\n            }\n        }\n        else{\n                this.init();\n        }\n    }\n\n    getSplitter(){\n        let split = this.document.createElement(\"split\");\n        split.classList.add(\"splitter\");\n        if(this.splitclass){\n          split.classList.add(this.splitclass);\n        }\n        let style = \"\"\n        if(this.vertical){\n            split.classList.add(\"splittervertical\");\n            style += `border-bottom:solid 4px #DCDCDC;height:0px;max-height:0px;width:100%;display:inline-block;cursor:row-resize;`;\n        }\n        else{\n            style += `border-left:solid 4px #DCDCDC;width:0px;max-width:0px;height:100%;display:inline-block;cursor:col-resize;`;\n        }\n        let hoverstyle = \"\";\n        if(this.addhoverstyle){\n          hoverstyle = style + this.addhoverstyle;\n        }\n\n        if(this.addstyle){\n          style += this.addstyle;\n        }\n        \n        split.setAttribute(\"style\",style);\n        split.setAttribute(\"draggable\",\"true\");\n        split.draggable = true;\n        split.addEventListener(\"mouseover\",() => {\n          split.classList.add(\"splitterhover\");\n          if(!this.vertical)\n          split.style.borderLeftColor = \"#6196B2\";\n          else\n          split.style.borderBottomColor = \"#6196B2\";\n\n          if(hoverstyle){\n            split.setAttribute(\"style\",hoverstyle);\n\n          }\n        });\n        split.addEventListener(\"mouseout\",() => {\n          split.classList.remove(\"splitterhover\");\n          \n          if(!this.vertical)\n          split.style.borderLeftColor = \"#DCDCDC\";\n          else\n          split.style.borderBottomColor = \"#DCDCDC\";\n\n          if(hoverstyle){\n            split.setAttribute(\"style\",style);\n\n          }\n        })\n\n        let eventListener = (event) => {\n          \n            let dropx = event.pageX;\n            let dropy = event.pageY;\n            let splitwidth = split.offsetWidth;\n            let prev : any = split.previousElementSibling;\n            let next : any = split.nextElementSibling;\n            prev.removeEventListener(\"drop\",eventListener);\n            next.removeEventListener(\"drop\",eventListener);\n            this.onDropSplitter.emit({event , split , prev, next});\n            if(!this.vertical){\n                let prevwidth,nextwidth;\n                if(dropx < split.offsetLeft){\n                    prevwidth = prev.clientWidth - (split.offsetLeft - dropx);\n                    nextwidth = next.clientWidth + (split.offsetLeft - dropx);\n\n                }\n                else{\n                    prevwidth = (prev.clientWidth)  + (dropx - split.offsetLeft);\n                    nextwidth = (next.clientWidth) - (dropx - split.offsetLeft);\n                }\n                prev.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${prevwidth}px` : `0 1 ${prevwidth}px`\n                next.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${nextwidth}px` : `0 1 ${nextwidth}px`\n                prev.style.overflowX = \"auto\";\n                next.style.overflowX=\"auto\";\n            }\n            else{\n                let prevheight,nextheight;\n                if(dropy < split.offsetTop){\n                    prevheight = prev.clientHeight - (split.offsetTop - dropy);\n                    nextheight = next.clientHeight + (split.offsetTop - dropy);\n\n                }\n                else{\n                    prevheight = prev.clientHeight + (dropy - split.offsetTop);\n                    nextheight = next.clientHeight - (dropy - split.offsetTop);\n                }\n                prev.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${prevheight}px` : `0 1 ${prevheight}px`\n                next.style.flex = next.hasAttribute(\"splitgrow\") ? `1 0 ${nextheight}px` : `0 1 ${nextheight}px`\n                prev.style.overflowY = \"auto\";\n                next.style.overflowY=\"auto\";\n            }\n      \n        }\n\n        split.addEventListener(\"dragstart\", (event) => {\n            let prev : any = split.previousElementSibling;\n            let next : any = split.nextElementSibling;\n            prev.addEventListener(\"drop\",eventListener);\n            next.addEventListener(\"drop\",eventListener);\n        })\n        return split;\n    }\n\n    getPercentage(pixel){\n        let width = this.parent.offsetWidth;\n        return pixel/width*100;\n    }\n    getPercentageHeight(pixel){\n        let height = this.parent.offsetHeight;\n        return pixel/height*100;\n    }\n\n    addMutations(){\n        let observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                this.reset();\n                this.init();\n            })\n        });\n    \n        let config = {childList : true};\n        observer.observe(this.parent,config);\n        this.observer = observer;\n    }\n\n    reset(){\n        this.observer.disconnect();\n        this.splits.forEach((item) => {\n            this.parent.removeChild(item);\n        });\n        this.splits = [];\n        this.observer = null;\n    }\n\n    \n\n     getStyle(className) {\n      var cssText = \"\";\n      var classes : any= this.document.styleSheets[0].rules || this.document.styleSheets[0].cssRules;\n      for (var x = 0; x < classes.length; x++) {        \n          if (classes[x].selectorText == className) {\n              cssText += classes[x].cssText || classes[x].style.cssText;\n          }         \n      }\n      return cssText;\n  }\n\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-test-component',\n  templateUrl: './test-component.component.html',\n  styleUrls: ['./test-component.component.css']\n})\nexport class TestComponentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>EXAMPLES USING SPLITTER</h1>\n<div class=\"boxcomment\">\n<div class=\"code\">\n<pre><code>\n    &lt;style&gt;\n      {{\".mainbox{\n            width:500px;\n            height:200px;\n        }\n        .boxmenu{\n            width:20%;\n            border:solid black 1px;\n\n        }\n        .box {\n            width:60%;\n            border:solid black 1px;\n        }\"}}\n    &lt;/style&gt;\n    &lt;div splitterDirective class=&quot;mainbox&quot; &gt;\n        &lt;div class=&quot;boxmenu&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;boxmenu&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n</div>\n<div class=\"comment\">\n    <p>In this example we can see a basic use in horizontal mode.</p>\n    <p>With class <code>.mainbox</code> we stablished the main size of the container of divs what we must have to define for a good function of the splitterDirective</p>\n    <p>With class <code>.box</code> and <code>.boxmenu</code> we stablished the initial width of the each div. </p>\n</div>\n</div>\n    <div splitterDirective class=\"mainbox\" >\n        <div class=\"boxmenu\"></div>\n        <div class=\"box\"></div>\n        <div class=\"boxmenu\"></div>\n    </div>\n    <br>\n    <br>\n<div class=\"boxcomment\">\n    <div class=\"code\">\n    <pre><code>\n        &lt;style&gt;\n           {{\" .box4 {\n                width:25%;\n                border:solid black 1px;\n            }\n            \"}}\n        &lt;/style&gt;\n        &lt;div splitterDirective [addstyle]=&quot;'border-left-color:black;border-left-width:10px'&quot; \n        [addhoverstyle]=&quot;'border-left-color:yellow;border-left-width:10px'&quot; [size]=&quot;'200px'&quot; &gt;\n            &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    </code></pre>\n</div>\n<div class=\"comment\">   \n    <p>\n        In this example we use propery <code>size</code> to limit the height on horizontal splitter mode. \n    </p>\n    <p>\n        The property <code>addstyle</code> and <code>addhoverstyle</code> we add custom styles for the splits. This way we can customize our splits or splits\n    </p>\n    <p>\n        With class <code>.box4</code> We define the initial width of each div\n    </p>\n\n</div>\n</div>\n    <div splitterDirective [addstyle]=\"'border-left-color:black;border-left-width:10px'\" [addhoverstyle]=\"'border-left-color:yellow;border-left-width:10px'\" [size]=\"'200px'\" >\n        <div class=\"box4\"></div>\n        <div class=\"box4\"></div>\n        <div class=\"box4\"></div>\n        <div class=\"box4\"></div>\n    </div>\n    <br>\n    <br>\n    <div class=\"boxcomment\">\n    <div class=\"code\">\n    <pre><code>\n        &lt;style&gt;\n           {{\".mainboxV{\n                height:400px;\n            }\n            .boxv {\n                height:33%;\n                border:solid black 1px;\n            }\n            .boxvmenu{\n                height: 100px;\n                border:solid black 1px;\n            \n            }\n            \"}}\n        &lt;/style&gt;\n        &lt;div splitterDirective [vertical]=&quot;true&quot; class=&quot;mainboxV&quot;  [size]=&quot;'400px'&quot;&gt;\n            &lt;div class=&quot;boxv&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;boxv&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;boxv&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n    </code></pre>\n    </div>\n    <div class=\"comment\">\n        <p>In this example we split in vertical mode setting a size of <code>600px</code> that in vertical case is the width.</p>\n        <p>Class <code>.mainboxV</code> set the style of the main container</p>\n        <p>Class <code>.boxvmenu</code> and boxv we set the initial height and style of the splits</p>\n    </div>\n</div>  \n    <div splitterDirective [vertical]=\"true\" class=\"mainboxV\"  [size]=\"'600px'\">\n        <div class=\"boxvmenu \"></div>\n        <div class=\"boxv\"></div>\n        <div class=\"boxvmenu\"></div>\n    </div>\n    <br>\n    <br>\n    <pre><code></code></pre>\n    \n\n","import { NgModule } from '@angular/core';\nimport { SplitterDirective } from './splitter.directive';\nimport { TestComponentComponent } from './test-component/test-component.component';\n\n\n\n@NgModule({\n  declarations: [ SplitterDirective, TestComponentComponent],\n  imports: [\n  ],\n  exports: [SplitterDirective]\n})\nexport class SplitterDirectiveModule { }\n"]}